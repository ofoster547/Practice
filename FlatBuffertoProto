using System;
using System.Collections.Generic;
using System.Text;
using reflection = Google.FlatBuffers.Reflection;

namespace FlatBuffersToProto
{
    public class FlatbuffersToProtobuf
    {
        private readonly reflection.SchemaT schema;

        private static readonly Dictionary<reflection.BaseType, string> BaseTypeToProto = new()
        {
            { reflection.BaseType.Bool, "bool" },
            { reflection.BaseType.Byte, "int32" },
            { reflection.BaseType.UByte, "uint32" },
            { reflection.BaseType.Short, "int32" },
            { reflection.BaseType.UShort, "uint32" },
            { reflection.BaseType.Int, "int32" },
            { reflection.BaseType.UInt, "uint32" },
            { reflection.BaseType.Long, "int64" },
            { reflection.BaseType.ULong, "uint64" },
            { reflection.BaseType.Float, "float" },
            { reflection.BaseType.Double, "double" },
            { reflection.BaseType.String, "string" }
        };

        public FlatbuffersToProtobuf(reflection.SchemaT schema)
        {
            this.schema = schema;
        }

        public string Convert()
        {
            var sb = new StringBuilder();

            // Enums
            foreach (var enumT in schema.Enums)
            {
                sb.AppendLine($"enum {enumT.Name} {{");
                foreach (var val in enumT.Values)
                {
                    sb.AppendLine($"  {val.Name} = {val.Value};");
                }
                sb.AppendLine("}");
                sb.AppendLine();
            }

            // Messages (tables)
            foreach (var obj in schema.Objects)
            {
                if (obj.IsStruct == true) continue; // skip structs if desired

                sb.AppendLine($"message {obj.Name} {{");

                int fieldNum = 1;
                foreach (var field in obj.Fields)
                {
                    string fieldType = GetProtoFieldType(field.Type);
                    string fieldName = field.Name;

                    if (IsVector(field.Type))
                    {
                        fieldType = GetVectorElementType(field.Type);
                        sb.AppendLine($"  repeated {fieldType} {fieldName} = {fieldNum++};");
                    }
                    else
                    {
                        sb.AppendLine($"  {fieldType} {fieldName} = {fieldNum++};");
                    }
                }

                sb.AppendLine("}");
                sb.AppendLine();
            }

            return sb.ToString();
        }

        private bool IsVector(reflection.TypeT type)
        {
            return type.BaseType == reflection.BaseType.Vector;
        }

        private string GetVectorElementType(reflection.TypeT type)
        {
            if (type.Element == reflection.BaseType.Obj)
            {
                return schema.Objects[type.Index].Name;
            }
            if (type.Element == reflection.BaseType.String)
            {
                return "string";
            }
            if (type.Element == reflection.BaseType.Enum)
            {
                return schema.Enums[type.Index].Name;
            }
            return BaseTypeToProto.TryGetValue(type.Element, out var baseType)
                ? baseType
                : "unknown";
        }

        private string GetProtoFieldType(reflection.TypeT type)
        {
            if (type.BaseType == reflection.BaseType.Obj)
            {
                return schema.Objects[type.Index].Name;
            }

            if (type.BaseType == reflection.BaseType.Enum)
            {
                return schema.Enums[type.Index].Name;
            }

            return BaseTypeToProto.TryGetValue(type.BaseType, out var baseType)
                ? baseType
                : "unknown";
        }
    }
}





// Load bfbs file (already parsed)
//var schema = reflection.SchemaT.DeserializeFrom(new FlatBuffers.ByteBuffer(bfbsBytes));

//var generator = new FlatbuffersToProtobuf(schema);
//string protoOutput = generator.Convert();

//Console.WriteLine(protoOutput);


//enum OrderSide : byte { BUY, SELL }

//table Order {
 // id:int;
 // symbol:string;
//  side:OrderSide;
//}
